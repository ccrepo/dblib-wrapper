/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_cpp_projects.html
 */

plugins {
  // Apply the cpp-library plugin to add support for building C++ libraries
  id 'cpp-library'

  // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
  id 'cpp-unit-test'
}

library {
  source.from file('src/main/src') 
  publicHeaders.from file('src/main/include/api')
  publicHeaders.from file('src/main/include/util')

  // Set the target operating system and architecture for this library
  targetMachines.add(machines.linux.x86_64)
  targetMachines.add(machines.macOS.x86_64)
}

unitTest {
  source.from file('src/test/src/')
  privateHeaders.from file('src/test/src/')
  privateHeaders.from file('src/main/include/util')
    
  targetMachines.add(machines.linux.x86_64)
  targetMachines.add(machines.macOS.x86_64)
}

tasks.withType(CppCompile).configureEach {
  compilerArgs.add '-fPIC'
  compilerArgs.add '-Wall'
  compilerArgs.add '-std=c++2a'
  compilerArgs.add '-pthread'
  compilerArgs.add '-Werror'
  compilerArgs.add '-Wextra'
  compilerArgs.add '-Wno-long-long'

  //compilerArgs.add '-H'
}

tasks.withType(LinkExecutable).configureEach {
  linkerArgs.add '-v'
  linkerArgs.add '-Werror' 
  linkerArgs.add '-pthread'
}

tasks.withType(RunTestExecutable).configureEach {
  enabled = false
}

tasks.register('showCompilerOptions') {
  doLast {
    println '\n-----------------------------------------------------\n'
    println 'Compiler options:'
    FileTree tree = fileTree('build').include('**/options.txt')
    // Iterate over the contents of a tree
    tree.each {File file ->
      println 'Content of file ' + file + ':\n'
      println file.text
      println '------\n'
    }
  }
}

tasks.register('showCompilerOutput') {
  dependsOn showCompilerOptions
  doLast {
    println '\n-----------------------------------------------------\n'
    println 'Compiler output:'
    FileTree tree = fileTree('build').include('**/output.txt')
    // Iterate over the contents of a tree
    tree.each {File file ->
      println 'Content of file ' + file + ':\n'
      println file.text
      println '------\n'
    }
  }
}

tasks.withType(InstallExecutable) {
  //finalizedBy showCompilerOutput
}

